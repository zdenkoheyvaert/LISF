! EMK...Changed to use Fortran 90 modules

  PROGRAM SNODEP

!*****************************************************************************************
!*****************************************************************************************
!**
!**  NAME: SNOW DEPTH ANALYSIS MODEL
!**
!**  PURPOSE:  DRIVER ROUTINE FOR THE SNOW DEPTH ANALYSIS MODEL.
!**
!**  CALLED FROM:  SNODEP_master.ksh
!**
!**  FILES ACCESSED
!**  ==============
!**  USE NAME/UNIT#           R/W DESCRIPTION
!**  ------------------------ --- ------------------------------------------
!**  //6                       W  STANDARD OUTPUT FILE
!**
!**   See module_snodep_arrays.f90 for common array descriptions
!**   See module_snodep_params.f90 for common parameter descriptions
!**   See module_snodep_tunblk.f90 for tuning variable descriptions
!**
!**  UPDATES
!**  =======
!**  26 APR 95  INITIAL UNISYS VERSION.....................................SSGT CONRY/SYSM
!**  09 FEB 96  CHANGED ARGUMENTS PASSED BETWEEN GETOBS, GETSNO, GETSMI,
!**             AND PROCES DUE TO CHANGES DESCRIBED IN THEIR PROLOGUES.
!**             FORMATTED PRINT STATEMENTS........................DR KOPP, SSGT CONRY/SYSM
!**  23 OCT 97  ADDED INCLUDE OF TUNES PROC AND CALL TO RDTUNE.............SSGT CONRY/DNXM
!**  23 FEB 01  PORTED FROM UNISYS MAINFRAME..............................SSGT MILLER/DNXM
!**  30 JAN 03  ADDED ROUTINE BLACKLIST......................................MR GAYNO/DNXM
!**  09 JUL 03  REMOVED CALL TO GETSST; NOW PART OF NT2ICE...................MR GAYNO/DNXM
!**  05 FEB 04  CHANGED GEOG RECORD LENGTH FROM 4-BYTE TO 2-BYTE WORD
!**             (INCORPORATED 18 APR 03 AER CHANGES)......................MR LEWISTON/DNXM
!**  05 MAY 04  MERGED IN THE SSMIS NASA TEAM II SEA ICE CONCENTRATION
!**             CAPABILITY.  CONVERTED TO FREE FORMAT FORTRAN 90 USING
!**             MODULES RATHER THAN COMMON BLOCKS.........................MR EYLANDER/DNXM
!**  21 OCT 04  PORTED TO CDFS II.  REMOVED GRIB SUBROUTINES SINCE
!**             CDFS II WRITING C++ GRIB ROUTINES.........................MR EYLANDER/DNXM
!**  21 MAR 05  REMOVED OBSOLETE ARRAY SMITMP.............................MR LEWISTON/DNXM
!**  14 APR 05  SEPARATED SNOW AND ICE INTO SEPARATE ARRAYS.
!**             ADDED CALL TO GETICE......................................MR LEWISTON/DNXM
!**  07 JUN 05  REMOVED JULHR FROM GETOBS & GETSMI CALLS..................MR LEWISTON/DNXM
!**  08 MAY 09  ADDED AMSR-E SNOW. REMOVED SEA ICE....................MR LEWISTON/2WXG/WEA
!**  16 JUN 09  CONVERTED TO EQUIDISTANT CYLINDRICAL GRID.............MR LEWISTON/2WXG/WEA
!**  18 Dec 09  ADDED GRIB OUTPUT.....................................MR LEWISTON/16WS/WXE
!**  05 JAN 10  CHANGED SSMIS FROM SDRS TO EDRS.......................MR LEWISTON/16WS/WXE
!**  13 SEP 10  ADDED CALL TO GETSFC..................................MR LEWISTON/16WS/WXE
!**  29 APR 11  MOVED BLACKLIST AND VALIDATION TO DBPULL..............MR LEWISTON/16WS/WXE
!**  08 NOV 11  REMOVED AMSR-E AND PORTED TO LINUX....................MR LEWISTON/16WS/WXE
!**  20 MAR 12  SWITCHED OBS SOURCE FROM CDMS TO JMOBS................MR LEWISTON/16WS/WXE
!**  29 MAY 12  MOVED MODIFIED TEST FROM SCRIPT TO GETSNO.............MR LEWISTON/16WS/WXE
!**  07 NOV 12  ADDED FRACTIONAL SNOW.................................MR LEWISTON/16WS/WXE
!**  10 OCT 13  CHANGED DAILY TO 4 TIMES/DAY. ADDED CYCLE_LOOP.
!**             REPLACED NAMELIST WITH GETENV CALLS...................MR LEWISTON/16WS/WXE
!**  15 FEB 17  ADDED VIIRS DATA........................................MR PUSKAR/16WS/WXE
!**  28 DEC 17  ADDED FILTER FOR MISSING ELEVATIONS...................MR LEWISTON/16WS/WXE
!**
!*****************************************************************************************
!*****************************************************************************************

  USE PARAMS
  USE TUNBLK
  USE SNODEP_ARRAYS
  use SNODEP_analysisMod ! EMK
  use SNODEP_utilMod ! EMK

  IMPLICIT NONE

  CHARACTER*100              ::  CFG                  ! CONFIG FILE DIRECTORY PATH
  CHARACTER*10               ::  DATE10               ! DATE-TIME GROUP OF CYCLE
  CHARACTER*100              ::  FRACDIR              ! FRACTIONAL SNOW DIRECTORY PATH
  CHARACTER*100              ::  GLOBAL               ! LIS GLOBAL DIRECTORY PATH
  CHARACTER*100              ::  GRIBDIR              ! GRIB FILE DIRECTORY PATH
  CHARACTER*90               ::  MESSAGE    (MSGLNS)  ! ERROR MESSAGE
  CHARACTER*5,  ALLOCATABLE  ::  NETID      (:)       ! NETWORK ID OF AN OBSERVATION
  CHARACTER*100              ::  MODIF                ! PATH TO MODIFIED DATA DIRECTORY
  CHARACTER*100              ::  SFCOBS               ! PATH TO DBPULL SNOW OBS DIRECTORY
  CHARACTER*100              ::  SSMIS                ! SSMIS FILE DIRECTORY PATH
  CHARACTER*100              ::  SSTDIR               ! SST GRIB FILE DIRECTORY PATH
  CHARACTER*9,  ALLOCATABLE  ::  STAID      (:)       ! STATION ID OF AN OBSERVATION
  CHARACTER*100              ::  STATIC               ! STATIC FILE DIRECTORY PATH
  CHARACTER*100              ::  STMPDIR              ! SFC TEMP DIRECTORY PATH
  CHARACTER*100              ::  UNMOD                ! PATH TO UNMODIFIED DATA DIRECTORY
  CHARACTER*100              ::  VIIRSDIR             ! PATH TO VIIRS DATA DIRECTORY

  INTEGER                    ::  CYCLE                ! CYCLE HOUR
  INTEGER                    ::  HEMI                 ! HEMISPHERE (1 = NH, 2 = SH, 3 = GLOBAL)
  INTEGER                    ::  I                    ! LOOP COUNTER FOR STATION COUNT
  INTEGER                    ::  JULHR                ! AFWA JULIAN HOUR BEING PROCESSED
  INTEGER                    ::  JULHR_BEG            ! AFWA JULIAN HOUR OF BEGINNING CYCLE
  INTEGER                    ::  JULHR_END            ! AFWA JULIAN HOUR OF ENDING CYCLE
  INTEGER                    ::  MONTH                ! MONTH OF YEAR (1-12)
  INTEGER,    ALLOCATABLE    ::  OBI        (:)       ! OBSERVATION I-COORDINATE
  INTEGER,    ALLOCATABLE    ::  OBJ        (:)       ! OBSERVATION J-COORDINATE
  INTEGER                    ::  STACNT               ! TOTAL NUMBER OF OBSERVATIONS USED
  INTEGER,    ALLOCATABLE    ::  STAELV     (:)       ! OBSERVATION ELEVATION (METERS)
  INTEGER,    ALLOCATABLE    ::  STALAT     (:)       ! OBSERVATION LATITUDE
  INTEGER,    ALLOCATABLE    ::  STALON     (:)       ! OBSERVATION LONGITUDE

  LOGICAL                    ::  SFCTMP_FOUND         ! FLAG FOR SFC TEMP FILE FOUND

  REAL,       ALLOCATABLE    ::  SFCTMP_LIS (:, :)    ! LIS SHELTER TEMPERATURE DATA
  REAL,       ALLOCATABLE    ::  STADEP     (:)       ! OBSERVATION SNOW DEPTH (METERS)

  CHARACTER*12 :: ROUTINE_NAME ! EMK

! ----------------------------------------------------------------------
! DEFINE SUBROUTINE INTERFACE.
! ----------------------------------------------------------------------

!   INTERFACE

!       SUBROUTINE COMBSORT (NETID, STAID, STALAT, STALON, STAELV,        &
!                            STADEP, STACNT)

!         IMPLICIT NONE
!         CHARACTER*5,   INTENT(INOUT) :: NETID        (:)
!         CHARACTER*9,   INTENT(INOUT) :: STAID        (:)
!         INTEGER,       INTENT(INOUT) :: STACNT
!         INTEGER,       INTENT(INOUT) :: STAELV       (:)
!         INTEGER,       INTENT(INOUT) :: STALAT       (:)
!         INTEGER,       INTENT(INOUT) :: STALON       (:)
!         REAL,          INTENT(INOUT) :: STADEP       (:)

!       END SUBROUTINE COMBSORT

!       SUBROUTINE GETFRAC (DATE10, FRACDIR)

!         IMPLICIT NONE
!         CHARACTER*10,  INTENT(IN)    :: DATE10
!         CHARACTER*100, INTENT(IN)    :: FRACDIR

!       END SUBROUTINE GETFRAC

!       SUBROUTINE GETGEO (MONTH, STATIC)

!         IMPLICIT NONE
!         CHARACTER*100, INTENT(IN)    :: STATIC
!         INTEGER,       INTENT(IN)    :: MONTH

!       END SUBROUTINE GETGEO

!       SUBROUTINE GETOBS (DATE10, MONTH,  SFCOBS, NETID,  STAID, STACNT, &
!                          STALAT, STALON, STAELV, STADEP, OBI,   OBJ)

!         IMPLICIT NONE
!         CHARACTER*10,  INTENT(IN)    :: DATE10
!         CHARACTER*5,   INTENT(OUT)   :: NETID        (:)
!         CHARACTER*100, INTENT(IN)    :: SFCOBS
!         CHARACTER*9,   INTENT(OUT)   :: STAID        (:)
!         INTEGER,       INTENT(IN)    :: MONTH
!         INTEGER,       INTENT(OUT)   :: OBI          (:)
!         INTEGER,       INTENT(OUT)   :: OBJ          (:)
!         INTEGER,       INTENT(OUT)   :: STACNT
!         INTEGER,       INTENT(OUT)   :: STALAT       (:)
!         INTEGER,       INTENT(OUT)   :: STALON       (:)
!         INTEGER,       INTENT(OUT)   :: STAELV       (:)
!         REAL,          INTENT(OUT)   :: STADEP       (:)

!       END SUBROUTINE GETOBS

!       SUBROUTINE GETSFC (DATE10, GLOBAL, STMPDIR, SFCTMP_FOUND, SFCTMP_LIS)

!         IMPLICIT NONE
!         CHARACTER*10,  INTENT(IN)    :: DATE10
!         CHARACTER*100, INTENT(IN)    :: GLOBAL
!         CHARACTER*100, INTENT(IN)    :: STMPDIR
!         LOGICAL,       INTENT(OUT)   :: SFCTMP_FOUND
!         REAL,          INTENT(OUT)   :: SFCTMP_LIS   (:, :)

!       END SUBROUTINE GETSFC

!       SUBROUTINE GETSMI (DATE10, SSMIS)

!         IMPLICIT NONE
!         CHARACTER*10,  INTENT(IN)    :: DATE10
!         CHARACTER*100, INTENT(IN)    :: SSMIS

!       END SUBROUTINE GETSMI

!       SUBROUTINE GETSNO (DATE10, MODIF, UNMOD, JULHR_BEG)

!         IMPLICIT NONE
!         CHARACTER*10,  INTENT(IN)    :: DATE10
!         CHARACTER*100, INTENT(IN)    :: MODIF
!         CHARACTER*100, INTENT(IN)    :: UNMOD
!         INTEGER,       INTENT(OUT)   :: JULHR_BEG

!       END SUBROUTINE GETSNO

!       SUBROUTINE GETSST (DATE10, SSTDIR, STMPDIR)

!         IMPLICIT NONE
!         CHARACTER*10,  INTENT(IN)    :: DATE10
!         CHARACTER*100, INTENT(IN)    :: SSTDIR
!         CHARACTER*100, INTENT(IN)    :: STMPDIR

!       END SUBROUTINE GETSST

!       SUBROUTINE GETVIIRS (DATE10, VIIRSDIR)

!         IMPLICIT NONE
!         CHARACTER*10,  INTENT(IN)    :: DATE10
!         CHARACTER*100, INTENT(IN)    :: VIIRSDIR

!       END SUBROUTINE GETVIIRS

!       SUBROUTINE GRIBIT (HEMI, DATE10, GRIBDIR)

!         IMPLICIT NONE
!         CHARACTER*10,  INTENT(IN)    :: DATE10
!         CHARACTER*100, INTENT(IN)    :: GRIBDIR
!         INTEGER,       INTENT(IN)    :: HEMI

!       END SUBROUTINE GRIBIT

!       SUBROUTINE PROCES (MONTH, CYCLE, STACNT, STALAT, STALON, STAELV,  &
!                          STADEP, OBI, OBJ, SFCTMP_FOUND, SFCTMP_LIS)

!         IMPLICIT NONE
!         INTEGER,       INTENT(IN)    :: CYCLE
!         INTEGER,       INTENT(IN)    :: MONTH
!         INTEGER,       INTENT(IN)    :: OBI          (:)
!         INTEGER,       INTENT(IN)    :: OBJ          (:)
!         INTEGER,       INTENT(IN)    :: STACNT
!         INTEGER,       INTENT(IN)    :: STAELV       (:)
!         INTEGER,       INTENT(IN)    :: STALAT       (:)
!         INTEGER,       INTENT(IN)    :: STALON       (:)
!         LOGICAL,       INTENT(IN)    :: SFCTMP_FOUND
!         REAL,          INTENT(IN)    :: SFCTMP_LIS   (:, :)
!         REAL,          INTENT(IN)    :: STADEP       (:)

!       END SUBROUTINE PROCES

!       SUBROUTINE RDTUNE (CFG)

!         IMPLICIT NONE
!         CHARACTER*100, INTENT(IN)    :: CFG

!       END SUBROUTINE RDTUNE

!       SUBROUTINE WRTDAT (DATE10, UNMOD)

!         IMPLICIT NONE
!         CHARACTER*10,  INTENT(IN)    :: DATE10
!         CHARACTER*100, INTENT(IN)    :: UNMOD

!       END SUBROUTINE WRTDAT

!   END INTERFACE

  ROUTINE_NAME = "SNODEP"
  MESSAGE = ' '
  HEMI    = 3

  WRITE (6,6000) 'RUNNING SNODEP MODEL'

! ----------------------------------------------------------------------
! RETRIEVE DATE AND PATHS FROM THE MASTER SCRIPT.
! ----------------------------------------------------------------------

  CALL GETENV ("date10",     DATE10)
  CALL GETENV ("SNOCFG" ,    CFG)
  CALL GETENV ("SNOFRAC",    FRACDIR)
  CALL GETENV ("LIS_GLOBAL", GLOBAL)
  CALL GETENV ("SNOGRIB",    GRIBDIR)
  CALL GETENV ("MODIF",      MODIF)
  CALL GETENV ("SFCOBS",     SFCOBS)
  CALL GETENV ("SSMIS",      SSMIS)
  CALL GETENV ("SST_DATA",   SSTDIR)
  CALL GETENV ("SFCTMPS",    STMPDIR)
  CALL GETENV ("STATIC",     STATIC)
  CALL GETENV ("UNMOD",      UNMOD)
  CALL GETENV ("VIIRS_CGF",  VIIRSDIR)

! ----------------------------------------------------------------------
! EXTRACT MONTH FROM DATE-TIME GROUP.
! ----------------------------------------------------------------------

  READ (DATE10(5:6), '(I2)', ERR=4200) MONTH

! ----------------------------------------------------------------------
! READ TUNING PARAMETER CONFIGURATION TABLE.
! ----------------------------------------------------------------------

  WRITE (6,6400) 'CALLING RDTUNE TO READ TUNING FILE'

  CALL RDTUNE (CFG)

! ----------------------------------------------------------------------
! ALLOCATE GRIDDED DATA ARRAYS.
! ----------------------------------------------------------------------

  ALLOCATE (CLIMO            (IGRID,     JGRID))
  ALLOCATE (ELEVAT           (IGRID,     JGRID))
  ALLOCATE (GEOG             (IGRID,     JGRID))
  ALLOCATE (ICEAGE           (IGRID,     JGRID))
  ALLOCATE (ICEAGE12Z        (IGRID,     JGRID))
  ALLOCATE (ICECON           (IGRID,     JGRID))
  ALLOCATE (ICEMASK          (IGRID,     JGRID))
  ALLOCATE (OLDCON           (IGRID,     JGRID))
  ALLOCATE (OLDDEP           (IGRID,     JGRID))
  ALLOCATE (OLDMASK          (IGRID,     JGRID))
  ALLOCATE (PTLAT            (IGRID,     JGRID))
  ALLOCATE (PTLON            (IGRID,     JGRID))
  ALLOCATE (SFCTMP_LIS       (IGRID,     JGRID_LIS))
  ALLOCATE (SNOAGE           (IGRID,     JGRID))
  ALLOCATE (SNOAGE12Z        (IGRID,     JGRID))
  ALLOCATE (SNOANL           (IGRID,     JGRID))
  ALLOCATE (SNOFRAC          (IGRID,     JGRID))
  ALLOCATE (SNOW_POSS        (IGRID,     JGRID))
  ALLOCATE (SSMIS_DEPTH      (IGRID,     JGRID))
  ALLOCATE (SSMIS_ICECON     (IGRID,     JGRID))
  ALLOCATE (SST              (SST_IGRID, SST_JGRID))
  ALLOCATE (VIIRSMAP         (IGRID,     JGRID))

! ----------------------------------------------------------------------
! ALLOCATE ARRAYS USED IN MAX # OF OBS RETURNED.
! ----------------------------------------------------------------------

  ALLOCATE (NETID            (MAXSOBS))
  ALLOCATE (OBI              (MAXSOBS))
  ALLOCATE (OBJ              (MAXSOBS))
  ALLOCATE (STADEP           (MAXSOBS))
  ALLOCATE (STAELV           (MAXSOBS))
  ALLOCATE (STAID            (MAXSOBS))
  ALLOCATE (STALAT           (MAXSOBS))
  ALLOCATE (STALON           (MAXSOBS))

! ----------------------------------------------------------------------
! RETRIEVE STATIC DATA SETS.
! ----------------------------------------------------------------------

  WRITE (6,6400) 'CALLING GETGEO TO GET STATIC FIELDS'

  CALL GETGEO (MONTH, STATIC)

! ----------------------------------------------------------------------
! RETRIEVE THE PREVIOUS SNOW ANALYSIS.
! ----------------------------------------------------------------------

  WRITE (6,6400) 'CALLING GETSNO TO GET PREVIOUS SNOW AND ICE DATA'

  CALL GETSNO (DATE10, MODIF, UNMOD, JULHR_BEG)

  JULHR = JULHR_BEG
  !CALL DATE10_JULHR (DATE10, JULHR_END)
  CALL DATE10_JULHR (DATE10, JULHR_END, PROGRAM_NAME, ROUTINE_NAME)

! ----------------------------------------------------------------------
! LOOP THROUGH UNCOMPLETED CYCLES.
! ----------------------------------------------------------------------

  CYCLE_LOOP : DO WHILE (JULHR .LT. JULHR_END)

    JULHR = JULHR + 6
    !CALL JULHR_DATE10 (JULHR, DATE10)
    CALL JULHR_DATE10 (JULHR, DATE10, PROGRAM_NAME, ROUTINE_NAME)

    WRITE (6,6600) DATE10
    READ (DATE10(9:10), '(I2)', ERR=4200) CYCLE

!   --------------------------------------------------------------------
!   RETRIEVE LIS SURFACE TEMPERATURES.
!   --------------------------------------------------------------------

    WRITE (6,6400) 'CALLING GETSFC TO GET LIS SHELTER TEMPERATURES'
    CALL GETSFC (DATE10, GLOBAL, STMPDIR, SFCTMP_FOUND, SFCTMP_LIS)

!   --------------------------------------------------------------------
!   RETRIEVE NAVY SEA SURFACE TEMPERATURE (SST) DATA.
!   --------------------------------------------------------------------

    WRITE (6,6400) 'CALLING GETSST TO GET SEA SURFACE TEMPERATURES'

    CALL GETSST (DATE10, SSTDIR, STMPDIR)

!   --------------------------------------------------------------------
!   RETRIEVE FRACTIONAL SNOW DATA.
!   --------------------------------------------------------------------

    IF (USEFRAC) THEN

      WRITE (6,6400) 'CALLING GETFRAC TO GET FRACTIONAL SNOW DATA'

      CALL GETFRAC (DATE10, FRACDIR)

    END IF

!   --------------------------------------------------------------------
!   RETRIEVE SURFACE OBSERVATIONS.
!   --------------------------------------------------------------------

    WRITE (6,6400) 'CALLING GETOBS TO PROCESS SURFACE OBSERVATIONS'

    CALL GETOBS (DATE10, MONTH,  SFCOBS, NETID, STAID, STACNT, STALAT,  &
                 STALON, STAELV, STADEP, OBI, OBJ)

!   --------------------------------------------------------------------
!   RETRIEVE SSMIS DATA.
!   --------------------------------------------------------------------

    WRITE (6,6400) 'CALLING GETSMI TO GET SSMIS EDR VALUES'

    CALL GETSMI (DATE10, SSMIS)

!   --------------------------------------------------------------------
!   RETRIEVE VIIRS DATA.
!   --------------------------------------------------------------------

    WRITE (6,6400) 'CALLING GETVIIRS TO GET VIIRS SNOW MAP'

    CALL GETVIIRS(DATE10, VIIRSDIR)


!   --------------------------------------------------------------------
!   PERFORM THE SNOW ANALYSIS.
!   --------------------------------------------------------------------

    WRITE (6,6400) 'CALLING PROCES TO PERFORM SNOW AND ICE ANALYSIS'

    CALL PROCES (MONTH, CYCLE, STACNT, STALAT, STALON, STAELV, STADEP,  &
                 OBI, OBJ, SFCTMP_FOUND, SFCTMP_LIS)

!   --------------------------------------------------------------------
!   PRINT OUT TOTAL NUMBER OF STATIONS PROCESSED. PRINT ANY STATION
!   WITH A SNOW DEPTH.  THIS WILL HELP IDENTIFY REGIONS MOST LIKELY
!   TO REQUIRE MANUAL MODIFICATIONS.  ANY BAD OB SHOULD SHOW HERE.
!   --------------------------------------------------------------------

    WRITE (6,6800) STACNT

    CALL COMBSORT (NETID, STAID, STALAT, STALON, STAELV, STADEP, STACNT)

    DO I = 1, STACNT

      IF (STADEP(I) >= MINPRT) THEN
        WRITE (6,7000) NETID(I), STAID(I), FLOAT(STALAT(I))/100.0,      &
        FLOAT(STALON(I))/100.0, STAELV(I), STADEP(I)
      END IF

    END DO

!   --------------------------------------------------------------------
!   WRITE OUT DATA TO FULL RESOLUTION FILES.
!   --------------------------------------------------------------------

    WRITE (6,6400) 'CALLING WRTDAT TO WRITE OUT DATA IN FLAT FILES'

    CALL WRTDAT (DATE10, UNMOD)

!   --------------------------------------------------------------------
!   CONVERT DATA TO GRIB FORMAT AND WRITE OUT.
!   --------------------------------------------------------------------

    WRITE (6,6400) 'CALLING GRIBIT TO WRITE OUT DATA IN GRIB FORMAT'

    CALL GRIBIT (HEMI, DATE10, GRIBDIR)

  END DO CYCLE_LOOP

! ----------------------------------------------------------------------
! DEALLOCATE ALL ARRAYS.
! ----------------------------------------------------------------------

  DEALLOCATE (CLIMO)
  DEALLOCATE (ELEVAT)
  DEALLOCATE (GEOG)
  DEALLOCATE (ICEAGE)
  DEALLOCATE (ICEAGE12Z)
  DEALLOCATE (ICECON)
  DEALLOCATE (ICEMASK)
  DEALLOCATE (NETID)
  DEALLOCATE (OBI)
  DEALLOCATE (OBJ)
  DEALLOCATE (OLDCON)
  DEALLOCATE (OLDDEP)
  DEALLOCATE (OLDMASK)
  DEALLOCATE (PTLAT)
  DEALLOCATE (PTLON)
  DEALLOCATE (SFCTMP_LIS)
  DEALLOCATE (SNOAGE)
  DEALLOCATE (SNOAGE12Z)
  DEALLOCATE (SNOANL)
  DEALLOCATE (SNOFRAC)
  DEALLOCATE (SNOW_POSS)
  DEALLOCATE (SSMIS_DEPTH)
  DEALLOCATE (SSMIS_ICECON)
  DEALLOCATE (SST)
  DEALLOCATE (STADEP)
  DEALLOCATE (STAELV)
  DEALLOCATE (STAID)
  DEALLOCATE (STALAT)
  DEALLOCATE (STALON)
  DEALLOCATE (VIIRSMAP)

  WRITE (6,6000) 'NORMAL TERMINATION'

  STOP

!     ------------------------------------------------------------------
!     ERROR HANDLING SECTION.
!     ------------------------------------------------------------------

 4200 CONTINUE

      MESSAGE(1) = ' ERROR CONVERTING DATA FROM CHARACTER TO INTEGER'
      MESSAGE(2) = ' DATE10 = ' // DATE10
      CALL ABORT_MESSAGE (PROGRAM_NAME, PROGRAM_NAME, MESSAGE)
      STOP

!     ------------------------------------------------------------------
!     FORMAT STATEMENTS.
!     ------------------------------------------------------------------

 6000 FORMAT (/, 1X, 55('-'),                                           &
              /, 3X, 'PROGRAM:  SNODEP - ', A                           &
              /, 1X, 55('-'))

 6400 FORMAT (/, ' - ', A)

 6800 FORMAT (/, 1X, 55('-'),                                           &
              /, 3X, 'PROGRAM:  SNODEP',                                &
              /, 5X, 'TOTAL STATIONS PROCESSED = ', I5,                 &
              /, 5X, 'PRINTING DEPTH REPORTS BY NETWORK & STATION ID'   &
              /, 5X, 'ELEV OF "-1000" INDICATES ELEVATION NOT REPORTED' &
              /, 1X, 55('-'))

 6600 FORMAT (/, ' - CYCLE DTG = ', A10)

 7000 FORMAT (/, 3X, 'NETID = ', A5, '   STATION ID = ', A9,            &
                     '   LAT = ', F6.2, '   LON = ', F7.2,              &
                     '   ELEV(M) = ', I5, '   DEPTH(M) = ', F7.5)

  END PROGRAM SNODEP
